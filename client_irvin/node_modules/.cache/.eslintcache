[{"/Users/ervinyoung/DSC180B/SPA_final/src/index.js":"1","/Users/ervinyoung/DSC180B/SPA_final/src/reportWebVitals.js":"2","/Users/ervinyoung/DSC180B/SPA_final/src/App.js":"3","/Users/ervinyoung/DSC180B/SPA_final/src/components/Profile.js":"4","/Users/ervinyoung/DSC180B/SPA_final/src/components/Marketplace.js":"5","/Users/ervinyoung/DSC180B/SPA_final/src/components/NFTpage.js":"6","/Users/ervinyoung/DSC180B/SPA_final/src/components/SellNFT.js":"7","/Users/ervinyoung/DSC180B/SPA_final/src/components/Navbar.js":"8","/Users/ervinyoung/DSC180B/SPA_final/src/components/NFTTile.js":"9","/Users/ervinyoung/DSC180B/SPA_final/src/pinata.js":"10","/Users/ervinyoung/DSC180B/SPA_final/src/components/Timer.js":"11"},{"size":1087,"mtime":1675909295865,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1675909295866,"results":"14","hashOfConfig":"13"},{"size":743,"mtime":1675909295861,"results":"15","hashOfConfig":"13"},{"size":3735,"mtime":1676078830912,"results":"16","hashOfConfig":"13"},{"size":3350,"mtime":1676345352921,"results":"17","hashOfConfig":"13"},{"size":4144,"mtime":1676501005439,"results":"18","hashOfConfig":"13"},{"size":5765,"mtime":1676342791094,"results":"19","hashOfConfig":"13"},{"size":4198,"mtime":1676346094663,"results":"20","hashOfConfig":"13"},{"size":845,"mtime":1676077810611,"results":"21","hashOfConfig":"13"},{"size":2722,"mtime":1676085370802,"results":"22","hashOfConfig":"13"},{"size":0,"mtime":1676346893398,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},"apmbn5",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"28"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"28"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/ervinyoung/DSC180B/SPA_final/src/index.js",["65"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\nimport SellNFT from './components/SellNFT';\nimport Marketplace from './components/Marketplace';\nimport Profile from './components/Profile';\nimport NFTPage from './components/NFTpage';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Marketplace />}/>\n        <Route path=\"/sellNFT\" element={<SellNFT />}/> \n        <Route path=\"/nftPage/:tokenId\" element={<NFTPage />}/>        \n        <Route path=\"/profile\" element={<Profile />}/> \n      </Routes>\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",[],"/Users/ervinyoung/DSC180B/SPA_final/src/reportWebVitals.js",[],[],"/Users/ervinyoung/DSC180B/SPA_final/src/App.js",["66","67","68"],[],"import './App.css';\nimport Navbar from './components/Navbar.js';\nimport Marketplace from './components/Marketplace';\nimport Profile from './components/Profile';\nimport SellNFT from './components/SellNFT';\nimport NFTPage from './components/NFTpage';\nimport ReactDOM from \"react-dom/client\";\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<Marketplace />}/>\n          <Route path=\"/nftPage\" element={<NFTPage />}/>        \n          <Route path=\"/profile\" element={<Profile />}/>\n          <Route path=\"/sellNFT\" element={<SellNFT />}/>             \n        </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/ervinyoung/DSC180B/SPA_final/src/components/Profile.js",["69"],[],"import Navbar from \"./Navbar\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport NFTTile from \"./NFTTile\";\n\nexport default function Profile () {\n    const [data, updateData] = useState([]);\n    const [dataFetched, updateFetched] = useState(false);\n    const [address, updateAddress] = useState(\"0x\");\n    const [totalPrice, updateTotalPrice] = useState(\"0\");\n\n    async function getNFTData(tokenId) {\n        const ethers = require(\"ethers\");\n        let sumPrice = 0;\n        //After adding your Hardhat network to your metamask, this code will get providers and signers\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const addr = await signer.getAddress();\n\n        //Pull the deployed contract instance\n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n\n        //create an NFT Token\n        let transaction = await contract.getMyNFTs()\n\n        /*\n        * Below function takes the metadata from tokenURI and the data returned by getMyNFTs() contract function\n        * and creates an object of information that is to be displayed\n        */\n        \n        const items = await Promise.all(transaction.map(async i => {\n            const tokenURI = await contract.tokenURI(i.tokenId);\n            let meta = await axios.get(tokenURI);\n            meta = meta.data;\n\n            let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n            let item = {\n                price,\n                tokenId: i.tokenId.toNumber(),\n                seller: i.seller,\n                owner: i.owner,\n                image: meta.image,\n                name: meta.name,\n                description: meta.description,\n            }\n            sumPrice += Number(price);\n            return item;\n        }))\n\n        updateData(items);\n        updateFetched(true);\n        updateAddress(addr);\n        updateTotalPrice(sumPrice.toPrecision(3));\n    }\n\n    const params = useParams();\n    const tokenId = params.tokenId;\n    if(!dataFetched)\n        getNFTData(tokenId);\n\n    return (\n        <div className=\"profileClass\" style={{\"min-height\":\"100vh\"}}>\n            <Navbar></Navbar>\n            <div className=\"profileClass\">\n            <div className=\"flex text-center flex-col mt-11 md:text-2xl text-white\">\n                <div className=\"mb-5\">\n                    <h2 className=\"font-bold\">Wallet Address</h2>  \n                    {address}\n                </div>\n            </div>\n            <div className=\"flex flex-row text-center justify-center mt-10 md:text-2xl text-white\">\n                    <div>\n                        <h2 className=\"font-bold\">No. of NFTs</h2>\n                        {data.length}\n                    </div>\n                    <div className=\"ml-20\">\n                        <h2 className=\"font-bold\">Total Value</h2>\n                        {totalPrice} ETH\n                    </div>\n            </div>\n            <div className=\"flex flex-col text-center items-center mt-11 text-white\">\n                <h2 className=\"font-bold\">Your NFTs</h2>\n                <div className=\"flex justify-center flex-wrap max-w-screen-xl\">\n                    {data.map((value, index) => {\n                    return <NFTTile data={value} key={index}></NFTTile>;\n                    })}\n                </div>\n                <div className=\"mt-10 text-xl\">\n                    {data.length === 0 ? \"Oops, No NFT data to display (Are you logged in?)\":\"\"}\n                </div>\n            </div>\n            </div>\n        </div>\n    )\n};","/Users/ervinyoung/DSC180B/SPA_final/src/components/Marketplace.js",[],[],"/Users/ervinyoung/DSC180B/SPA_final/src/components/NFTpage.js",["70","71","72","73","74"],[],"/Users/ervinyoung/DSC180B/SPA_final/src/components/SellNFT.js",["75"],[],"import Navbar from \"./Navbar\";\nimport { useState } from \"react\";\nimport { uploadFileToIPFS, uploadJSONToIPFS } from \"../pinata\";\nimport Marketplace from '../Marketplace.json';\nimport { useLocation } from \"react-router\";\n\nexport default function SellNFT () {\n    const [formParams, updateFormParams] = useState({ name: '', description: '', reserve: '', time: ''});\n    const [fileURL, setFileURL] = useState(null);\n    const ethers = require(\"ethers\");\n    const [message, updateMessage] = useState('');\n    const location = useLocation();\n\n    async function OnChangeFile(e) {\n        var file = e.target.files[0];\n        try {\n            const response = await uploadFileToIPFS(file);\n            if(response.success === true) {\n                console.log(\"Uploaded image to Pinata: \", response.pinataURL)\n                setFileURL(response.pinataURL);\n            }\n        }\n        catch(e) {\n            console.log(\"Error during file upload\", e);\n        }\n    }\n\n    async function uploadMetadataToIPFS(){\n        const {name, description, reserve, time} = formParams;\n        if (!name || !description || !reserve || !time || !fileURL){\n            return;\n        }\n\n        const nftJSON = {\n            name, description, reserve, time, image: fileURL\n        }\n\n        console.log(nftJSON)\n\n        try {\n            const response = await uploadJSONToIPFS(nftJSON)\n            if (response.success === true) {\n                console.log('Uploaded JSON to Pinata: ', response);\n                return response.pinataURL;\n            }\n        } catch(e){\n            console.log('error uploading JSON metadata: ', e)\n        }\n    }\n\n\n    async function listNFT(e){\n        \n        e.preventDefault();\n\n        try {\n            const metadataURL = await uploadMetadataToIPFS();\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            \n            updateMessage('Please wait ... uploading');\n\n            let contract = new ethers.Contract(Marketplace.address, Marketplace.abi, signer);\n            const reserve = ethers.utils.parseUnits(formParams.reserve, 'ether');\n            const time = formParams.time;\n            let listingPrice = await contract.getListPrice();\n            listingPrice = listingPrice.toString();\n\n            let transaction = await contract.createToken(metadataURL, reserve, time, {value: listingPrice});\n            await transaction.wait();\n\n            alert('Successfully listed your NFT!');\n            updateMessage(\"\");\n            updateFormParams({ name: '', description: '', reserve: '', time: ''})\n            window.location.replace('/');\n        } catch(e) {\n            alert('Upload error: ' + e);\n        }\n    }\n    \n    return (\n        <div className=\"\">\n        <Navbar></Navbar>\n        <div className=\"flex flex-col place-items-center mt-10\" id=\"nftForm\">\n            <form className=\"bg-white shadow-md rounded px-8 pt-4 pb-8 mb-4\">\n            <h3 className=\"text-center font-bold text-purple-500 mb-8\">Upload your NFT to the marketplace</h3>\n                <div className=\"mb-4\">\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"name\">NFT Name</label>\n                    <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" id=\"name\" type=\"text\" placeholder=\"Axie#4563\" onChange={e => updateFormParams({...formParams, name: e.target.value})} value={formParams.name}></input>\n                </div>\n                <div className=\"mb-6\">\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"description\">NFT Description</label>\n                    <textarea className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" cols=\"40\" rows=\"5\" id=\"description\" type=\"text\" placeholder=\"Axie Infinity Collection\" value={formParams.description} onChange={e => updateFormParams({...formParams, description: e.target.value})}></textarea>\n                </div>\n                <div className=\"mb-6\">\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"reserve\">Reserve (in ETH)</label>\n                    <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" type=\"number\" placeholder=\"Min 0.001 ETH\" step=\"0.01\" value={formParams.price} onChange={e => updateFormParams({...formParams, reserve: e.target.value})}></input>\n                </div>\n                <div className=\"mb-6\">\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"time\">Auction Time (in seconds)</label>\n                    <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" type=\"number\" placeholder=\"Min 500 seconds\" step=\"60\" value={formParams.price} onChange={e => updateFormParams({...formParams, time: e.target.value})}></input>\n                </div>\n                <div>\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"image\">Upload Image</label>\n                    <input type={\"file\"} onChange={OnChangeFile}></input>\n                </div>\n                <br></br>\n                <div className=\"text-green text-center\">{message}</div>\n                <button onClick={listNFT} className=\"font-bold mt-10 w-full bg-purple-500 text-white rounded p-2 shadow-lg\">\n                    List NFT\n                </button>\n            </form>\n        </div>\n        </div>\n    )\n}","/Users/ervinyoung/DSC180B/SPA_final/src/components/Navbar.js",["76","77","78","79","80","81","82"],[],"import logo from '../logo_3.png';\nimport fullLogo from '../logo.png';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams\n} from \"react-router-dom\";\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\n\nfunction Navbar() {\n\nconst [connected, toggleConnect] = useState(false);\nconst location = useLocation();\nconst [currAddress, updateAddress] = useState('0x');\n\nasync function getAddress() {\n  const ethers = require(\"ethers\");\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  const addr = await signer.getAddress();\n  updateAddress(addr);\n}\n\nfunction updateButton() {\n  const ethereumButton = document.querySelector('.enableEthereumButton');\n  ethereumButton.textContent = \"Connected\";\n  ethereumButton.classList.remove(\"hover:bg-blue-70\");\n  ethereumButton.classList.remove(\"bg-blue-500\");\n  ethereumButton.classList.add(\"hover:bg-green-70\");\n  ethereumButton.classList.add(\"bg-green-500\");\n}\n\nasync function connectWebsite() {\n\n    const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n    if(chainId !== '0x5')\n    {\n      //alert('Incorrect network! Switch your metamask network to Rinkeby');\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: '0x5' }],\n     })\n    }  \n    await window.ethereum.request({ method: 'eth_requestAccounts' })\n      .then(() => {\n        updateButton();\n        console.log(\"here\");\n        getAddress();\n        window.location.replace(location.pathname)\n      });\n}\n\n  useEffect(() => {\n    let val = window.ethereum.isConnected();\n    if(val)\n    {\n      getAddress();\n      toggleConnect(val);\n      updateButton();\n    }\n\n    window.ethereum.on('accountsChanged', function(accounts){\n      window.location.replace(location.pathname)\n    })\n  });\n\n    return (\n      <div className=\"\">\n        <nav className=\"w-screen\">\n          <ul className='flex items-end justify-between py-3 bg-transparent text-white pr-5'>\n          <li className='flex items-end ml-5 pb-2'>\n            <Link to=\"/\">\n            <img src={fullLogo} alt=\"\" width={120} height={120} className=\"inline-block -mt-2\"/>\n            <div className='inline-block font-bold text-xl ml-2'>\n              NFT Marketplace\n            </div>\n            </Link>\n          </li>\n          <li className='w-2/6'>\n            <ul className='lg:flex justify-between font-bold mr-10 text-lg'>\n              {location.pathname === \"/\" ? \n              <li className='border-b-2 hover:pb-0 p-2'>\n                <Link to=\"/\">Marketplace</Link>\n              </li>\n              :\n              <li className='hover:border-b-2 hover:pb-0 p-2'>\n                <Link to=\"/\">Marketplace</Link>\n              </li>              \n              }\n              {location.pathname === \"/sellNFT\" ? \n              <li className='border-b-2 hover:pb-0 p-2'>\n                <Link to=\"/sellNFT\">Sell NFT</Link>\n              </li>\n              :\n              <li className='hover:border-b-2 hover:pb-0 p-2'>\n                <Link to=\"/sellNFT\">Sell NFT</Link>\n              </li>              \n              }              \n              {location.pathname === \"/profile\" ? \n              <li className='border-b-2 hover:pb-0 p-2'>\n                <Link to=\"/profile\">Profile</Link>\n              </li>\n              :\n              <li className='hover:border-b-2 hover:pb-0 p-2'>\n                <Link to=\"/profile\">Profile</Link>\n              </li>              \n              }  \n              <li>\n                <button className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\" onClick={connectWebsite}>{connected? \"Connected\":\"Connect Wallet\"}</button>\n              </li>\n            </ul>\n          </li>\n          </ul>\n        </nav>\n        <div className='text-white text-bold text-right mr-10 text-sm'>\n          {currAddress !== \"0x\" ? \"Connected to\":\"Not Connected. Please login to view NFTs\"} {currAddress !== \"0x\" ? (currAddress.substring(0,15)+'...'):\"\"}\n        </div>\n      </div>\n    );\n  }\n\n  export default Navbar;","/Users/ervinyoung/DSC180B/SPA_final/src/components/NFTTile.js",["83","84"],[],"import axie from \"../tile.jpeg\";\nimport {\n    BrowserRouter as Router,\n    Link,\n  } from \"react-router-dom\";\n\nfunction NFTTile (data) {\n    const newTo = {\n        pathname:\"/nftPage/\"+data.data.tokenId\n    }\n    return (\n        <Link to={newTo}>\n        <div className=\"border-2 ml-12 mt-5 mb-12 flex flex-col items-center rounded-lg w-48 md:w-72 shadow-2xl\">\n            <img src={data.data.image} alt=\"\" className=\"w-72 h-80 rounded-lg object-cover\" />\n            <div className= \"text-white w-full p-2 bg-gradient-to-t from-[#454545] to-transparent rounded-lg pt-5 -mt-20\">\n                <strong className=\"text-xl\">{data.data.name}</strong>\n                <p className=\"display-inline\">\n                    {data.data.description}\n                </p>\n            </div>\n        </div>\n        </Link>\n    )\n}\n\nexport default NFTTile;","/Users/ervinyoung/DSC180B/SPA_final/src/pinata.js",["85","86"],[],"//require('dotenv').config();\nconst key = process.env.REACT_APP_PINATA_KEY;\nconst secret = process.env.REACT_APP_PINATA_SECRET;\n\nconst axios = require('axios');\nconst FormData = require('form-data');\n\nexport const uploadJSONToIPFS = async(JSONBody) => {\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n    //making axios POST request to Pinata ⬇️\n    return axios \n        .post(url, JSONBody, {\n            headers: {\n                pinata_api_key: 'aeb41874e549c12e84ca',\n                pinata_secret_api_key: 'addd887b3245bc735a9a71a5236dbd8714c4ffca616be5c6bbf363127b9cff4a',\n            }\n        })\n        .then(function (response) {\n           return {\n               success: true,\n               pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n           };\n        })\n        .catch(function (error) {\n            console.log(error)\n            return {\n                success: false,\n                message: error.message,\n            }\n\n    });\n};\n\nexport const uploadFileToIPFS = async(file) => {\n    const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n    //making axios POST request to Pinata ⬇️\n    \n    let data = new FormData();\n    data.append('file', file);\n\n    const metadata = JSON.stringify({\n        name: 'testname',\n        keyvalues: {\n            exampleKey: 'exampleValue'\n        }\n    });\n    data.append('pinataMetadata', metadata);\n\n    //pinataOptions are optional\n    const pinataOptions = JSON.stringify({\n        cidVersion: 0,\n        customPinPolicy: {\n            regions: [\n                {\n                    id: 'FRA1',\n                    desiredReplicationCount: 1\n                },\n                {\n                    id: 'NYC1',\n                    desiredReplicationCount: 2\n                }\n            ]\n        }\n    });\n    data.append('pinataOptions', pinataOptions);\n\n    return axios \n        .post(url, data, {\n            maxBodyLength: 'Infinity',\n            headers: {\n                'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n                pinata_api_key: 'aeb41874e549c12e84ca',\n                pinata_secret_api_key: 'addd887b3245bc735a9a71a5236dbd8714c4ffca616be5c6bbf363127b9cff4a',\n            }\n        })\n        .then(function (response) {\n            console.log(\"image uploaded\", response.data.IpfsHash)\n            return {\n               success: true,\n               pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n           };\n        })\n        .catch(function (error) {\n            console.log(error)\n            return {\n                success: false,\n                message: error.message,\n            }\n\n    });\n};","/Users/ervinyoung/DSC180B/SPA_final/src/components/Timer.js",[],[],{"ruleId":"87","severity":1,"message":"88","line":4,"column":8,"nodeType":"89","messageId":"90","endLine":4,"endColumn":11},{"ruleId":"87","severity":1,"message":"91","line":2,"column":8,"nodeType":"89","messageId":"90","endLine":2,"endColumn":14},{"ruleId":"87","severity":1,"message":"92","line":7,"column":8,"nodeType":"89","messageId":"90","endLine":7,"endColumn":16},{"ruleId":"87","severity":1,"message":"93","line":9,"column":3,"nodeType":"89","messageId":"90","endLine":9,"endColumn":16},{"ruleId":"87","severity":1,"message":"94","line":2,"column":10,"nodeType":"89","messageId":"90","endLine":2,"endColumn":21},{"ruleId":"87","severity":1,"message":"95","line":2,"column":8,"nodeType":"89","messageId":"90","endLine":2,"endColumn":12},{"ruleId":"87","severity":1,"message":"94","line":3,"column":10,"nodeType":"89","messageId":"90","endLine":3,"endColumn":21},{"ruleId":"87","severity":1,"message":"96","line":7,"column":8,"nodeType":"89","messageId":"90","endLine":7,"endColumn":13},{"ruleId":"97","severity":1,"message":"98","line":98,"column":35,"nodeType":"99","messageId":"100","endLine":98,"endColumn":37},{"ruleId":"97","severity":1,"message":"98","line":98,"column":64,"nodeType":"99","messageId":"100","endLine":98,"endColumn":66},{"ruleId":"87","severity":1,"message":"101","line":12,"column":11,"nodeType":"89","messageId":"90","endLine":12,"endColumn":19},{"ruleId":"87","severity":1,"message":"102","line":1,"column":8,"nodeType":"89","messageId":"90","endLine":1,"endColumn":12},{"ruleId":"87","severity":1,"message":"103","line":4,"column":20,"nodeType":"89","messageId":"90","endLine":4,"endColumn":26},{"ruleId":"87","severity":1,"message":"104","line":5,"column":3,"nodeType":"89","messageId":"90","endLine":5,"endColumn":9},{"ruleId":"87","severity":1,"message":"105","line":6,"column":3,"nodeType":"89","messageId":"90","endLine":6,"endColumn":8},{"ruleId":"87","severity":1,"message":"106","line":8,"column":3,"nodeType":"89","messageId":"90","endLine":8,"endColumn":16},{"ruleId":"87","severity":1,"message":"107","line":9,"column":3,"nodeType":"89","messageId":"90","endLine":9,"endColumn":12},{"ruleId":"108","severity":1,"message":"109","line":57,"column":3,"nodeType":"89","endLine":57,"endColumn":12,"suggestions":"110"},{"ruleId":"87","severity":1,"message":"95","line":1,"column":8,"nodeType":"89","messageId":"90","endLine":1,"endColumn":12},{"ruleId":"87","severity":1,"message":"103","line":3,"column":22,"nodeType":"89","messageId":"90","endLine":3,"endColumn":28},{"ruleId":"87","severity":1,"message":"111","line":2,"column":7,"nodeType":"89","messageId":"90","endLine":2,"endColumn":10},{"ruleId":"87","severity":1,"message":"112","line":3,"column":7,"nodeType":"89","messageId":"90","endLine":3,"endColumn":13},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'ReactDOM' is defined but never used.","'BrowserRouter' is defined but never used.","'useLocation' is defined but never used.","'axie' is defined but never used.","'Timer' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'location' is assigned a value but never used.","'logo' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'useRouteMatch' is defined but never used.","'useParams' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'toggleConnect'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [location.pathname] as a second argument to the useEffect Hook.",["113"],"'key' is assigned a value but never used.","'secret' is assigned a value but never used.",{"desc":"114","fix":"115"},"Add dependencies array: [location.pathname]",{"range":"116","text":"117"},[1902,1902],", [location.pathname]"]